{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Load the CIFAR-10 dataset\n",
        "(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
        "\n",
        "# Normalize the pixel values\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
        "\n",
        "# Convert labels to one-hot encoded format\n",
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)\n",
        "\n",
        "# Split training data into training and validation sets\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)\n",
        "\n",
        "# Display dataset information\n",
        "print(f\"Training samples: {x_train.shape[0]}, Validation samples: {x_val.shape[0]}, Test samples: {x_test.shape[0]}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Training samples: 40000, Validation samples: 10000, Test samples: 10000\n"
        }
      ],
      "execution_count": 21,
      "metadata": {
        "gather": {
          "logged": 1749955795139
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.applications import MobileNetV2\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the MobileNetV2 model\n",
        "base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(32, 32, 3))\n",
        "\n",
        "# Display model architecture\n",
        "base_model.summary()\n",
        "\n",
        "# Inspect layers and find the first layer with weights\n",
        "layer_with_weights = None\n",
        "for layer in base_model.layers:\n",
        "    if layer.get_weights():\n",
        "        layer_with_weights = layer\n",
        "        break\n",
        "\n",
        "if layer_with_weights:\n",
        "    print(f\"First layer with weights: {layer_with_weights.name}\")\n",
        "    weights = layer_with_weights.get_weights()[0]\n",
        "    print(weights.shape)\n",
        "    if weights.ndim == 4:  # Check if weights are compatible for visualization\n",
        "        plt.imshow(weights[:, :, :, 0], cmap='viridis')\n",
        "        plt.title(f'Visualizing Features from {layer_with_weights.name}')\n",
        "        plt.show()\n",
        "    else:\n",
        "        print(f\"Cannot visualize weights from layer {layer_with_weights.name}: incompatible dimensions.\")\n",
        "else:\n",
        "    print(\"No layers with weights found in the model.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "WARNING:tensorflow:`input_shape` is undefined or non-square, or `rows` is not in [96, 128, 160, 192, 224]. Weights for input shape (224, 224) will be loaded as the default.\nModel: \"mobilenetv2_1.00_224\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_5 (InputLayer)        [(None, 32, 32, 3)]          0         []                            \n                                                                                                  \n Conv1 (Conv2D)              (None, 16, 16, 32)           864       ['input_5[0][0]']             \n                                                                                                  \n bn_Conv1 (BatchNormalizati  (None, 16, 16, 32)           128       ['Conv1[0][0]']               \n on)                                                                                              \n                                                                                                  \n Conv1_relu (ReLU)           (None, 16, 16, 32)           0         ['bn_Conv1[0][0]']            \n                                                                                                  \n expanded_conv_depthwise (D  (None, 16, 16, 32)           288       ['Conv1_relu[0][0]']          \n epthwiseConv2D)                                                                                  \n                                                                                                  \n expanded_conv_depthwise_BN  (None, 16, 16, 32)           128       ['expanded_conv_depthwise[0][0\n  (BatchNormalization)                                              ]']                           \n                                                                                                  \n expanded_conv_depthwise_re  (None, 16, 16, 32)           0         ['expanded_conv_depthwise_BN[0\n lu (ReLU)                                                          ][0]']                        \n                                                                                                  \n expanded_conv_project (Con  (None, 16, 16, 16)           512       ['expanded_conv_depthwise_relu\n v2D)                                                               [0][0]']                      \n                                                                                                  \n expanded_conv_project_BN (  (None, 16, 16, 16)           64        ['expanded_conv_project[0][0]'\n BatchNormalization)                                                ]                             \n                                                                                                  \n block_1_expand (Conv2D)     (None, 16, 16, 96)           1536      ['expanded_conv_project_BN[0][\n                                                                    0]']                          \n                                                                                                  \n block_1_expand_BN (BatchNo  (None, 16, 16, 96)           384       ['block_1_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_1_expand_relu (ReLU)  (None, 16, 16, 96)           0         ['block_1_expand_BN[0][0]']   \n                                                                                                  \n block_1_pad (ZeroPadding2D  (None, 17, 17, 96)           0         ['block_1_expand_relu[0][0]'] \n )                                                                                                \n                                                                                                  \n block_1_depthwise (Depthwi  (None, 8, 8, 96)             864       ['block_1_pad[0][0]']         \n seConv2D)                                                                                        \n                                                                                                  \n block_1_depthwise_BN (Batc  (None, 8, 8, 96)             384       ['block_1_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_1_depthwise_relu (Re  (None, 8, 8, 96)             0         ['block_1_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_1_project (Conv2D)    (None, 8, 8, 24)             2304      ['block_1_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_1_project_BN (BatchN  (None, 8, 8, 24)             96        ['block_1_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_2_expand (Conv2D)     (None, 8, 8, 144)            3456      ['block_1_project_BN[0][0]']  \n                                                                                                  \n block_2_expand_BN (BatchNo  (None, 8, 8, 144)            576       ['block_2_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_2_expand_relu (ReLU)  (None, 8, 8, 144)            0         ['block_2_expand_BN[0][0]']   \n                                                                                                  \n block_2_depthwise (Depthwi  (None, 8, 8, 144)            1296      ['block_2_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_2_depthwise_BN (Batc  (None, 8, 8, 144)            576       ['block_2_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_2_depthwise_relu (Re  (None, 8, 8, 144)            0         ['block_2_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_2_project (Conv2D)    (None, 8, 8, 24)             3456      ['block_2_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_2_project_BN (BatchN  (None, 8, 8, 24)             96        ['block_2_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_2_add (Add)           (None, 8, 8, 24)             0         ['block_1_project_BN[0][0]',  \n                                                                     'block_2_project_BN[0][0]']  \n                                                                                                  \n block_3_expand (Conv2D)     (None, 8, 8, 144)            3456      ['block_2_add[0][0]']         \n                                                                                                  \n block_3_expand_BN (BatchNo  (None, 8, 8, 144)            576       ['block_3_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_3_expand_relu (ReLU)  (None, 8, 8, 144)            0         ['block_3_expand_BN[0][0]']   \n                                                                                                  \n block_3_pad (ZeroPadding2D  (None, 9, 9, 144)            0         ['block_3_expand_relu[0][0]'] \n )                                                                                                \n                                                                                                  \n block_3_depthwise (Depthwi  (None, 4, 4, 144)            1296      ['block_3_pad[0][0]']         \n seConv2D)                                                                                        \n                                                                                                  \n block_3_depthwise_BN (Batc  (None, 4, 4, 144)            576       ['block_3_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_3_depthwise_relu (Re  (None, 4, 4, 144)            0         ['block_3_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_3_project (Conv2D)    (None, 4, 4, 32)             4608      ['block_3_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_3_project_BN (BatchN  (None, 4, 4, 32)             128       ['block_3_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_4_expand (Conv2D)     (None, 4, 4, 192)            6144      ['block_3_project_BN[0][0]']  \n                                                                                                  \n block_4_expand_BN (BatchNo  (None, 4, 4, 192)            768       ['block_4_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_4_expand_relu (ReLU)  (None, 4, 4, 192)            0         ['block_4_expand_BN[0][0]']   \n                                                                                                  \n block_4_depthwise (Depthwi  (None, 4, 4, 192)            1728      ['block_4_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_4_depthwise_BN (Batc  (None, 4, 4, 192)            768       ['block_4_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_4_depthwise_relu (Re  (None, 4, 4, 192)            0         ['block_4_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_4_project (Conv2D)    (None, 4, 4, 32)             6144      ['block_4_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_4_project_BN (BatchN  (None, 4, 4, 32)             128       ['block_4_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_4_add (Add)           (None, 4, 4, 32)             0         ['block_3_project_BN[0][0]',  \n                                                                     'block_4_project_BN[0][0]']  \n                                                                                                  \n block_5_expand (Conv2D)     (None, 4, 4, 192)            6144      ['block_4_add[0][0]']         \n                                                                                                  \n block_5_expand_BN (BatchNo  (None, 4, 4, 192)            768       ['block_5_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_5_expand_relu (ReLU)  (None, 4, 4, 192)            0         ['block_5_expand_BN[0][0]']   \n                                                                                                  \n block_5_depthwise (Depthwi  (None, 4, 4, 192)            1728      ['block_5_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_5_depthwise_BN (Batc  (None, 4, 4, 192)            768       ['block_5_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_5_depthwise_relu (Re  (None, 4, 4, 192)            0         ['block_5_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_5_project (Conv2D)    (None, 4, 4, 32)             6144      ['block_5_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_5_project_BN (BatchN  (None, 4, 4, 32)             128       ['block_5_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_5_add (Add)           (None, 4, 4, 32)             0         ['block_4_add[0][0]',         \n                                                                     'block_5_project_BN[0][0]']  \n                                                                                                  \n block_6_expand (Conv2D)     (None, 4, 4, 192)            6144      ['block_5_add[0][0]']         \n                                                                                                  \n block_6_expand_BN (BatchNo  (None, 4, 4, 192)            768       ['block_6_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_6_expand_relu (ReLU)  (None, 4, 4, 192)            0         ['block_6_expand_BN[0][0]']   \n                                                                                                  \n block_6_pad (ZeroPadding2D  (None, 5, 5, 192)            0         ['block_6_expand_relu[0][0]'] \n )                                                                                                \n                                                                                                  \n block_6_depthwise (Depthwi  (None, 2, 2, 192)            1728      ['block_6_pad[0][0]']         \n seConv2D)                                                                                        \n                                                                                                  \n block_6_depthwise_BN (Batc  (None, 2, 2, 192)            768       ['block_6_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_6_depthwise_relu (Re  (None, 2, 2, 192)            0         ['block_6_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_6_project (Conv2D)    (None, 2, 2, 64)             12288     ['block_6_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_6_project_BN (BatchN  (None, 2, 2, 64)             256       ['block_6_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_7_expand (Conv2D)     (None, 2, 2, 384)            24576     ['block_6_project_BN[0][0]']  \n                                                                                                  \n block_7_expand_BN (BatchNo  (None, 2, 2, 384)            1536      ['block_7_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_7_expand_relu (ReLU)  (None, 2, 2, 384)            0         ['block_7_expand_BN[0][0]']   \n                                                                                                  \n block_7_depthwise (Depthwi  (None, 2, 2, 384)            3456      ['block_7_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_7_depthwise_BN (Batc  (None, 2, 2, 384)            1536      ['block_7_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_7_depthwise_relu (Re  (None, 2, 2, 384)            0         ['block_7_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_7_project (Conv2D)    (None, 2, 2, 64)             24576     ['block_7_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_7_project_BN (BatchN  (None, 2, 2, 64)             256       ['block_7_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_7_add (Add)           (None, 2, 2, 64)             0         ['block_6_project_BN[0][0]',  \n                                                                     'block_7_project_BN[0][0]']  \n                                                                                                  \n block_8_expand (Conv2D)     (None, 2, 2, 384)            24576     ['block_7_add[0][0]']         \n                                                                                                  \n block_8_expand_BN (BatchNo  (None, 2, 2, 384)            1536      ['block_8_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_8_expand_relu (ReLU)  (None, 2, 2, 384)            0         ['block_8_expand_BN[0][0]']   \n                                                                                                  \n block_8_depthwise (Depthwi  (None, 2, 2, 384)            3456      ['block_8_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_8_depthwise_BN (Batc  (None, 2, 2, 384)            1536      ['block_8_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_8_depthwise_relu (Re  (None, 2, 2, 384)            0         ['block_8_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_8_project (Conv2D)    (None, 2, 2, 64)             24576     ['block_8_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_8_project_BN (BatchN  (None, 2, 2, 64)             256       ['block_8_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_8_add (Add)           (None, 2, 2, 64)             0         ['block_7_add[0][0]',         \n                                                                     'block_8_project_BN[0][0]']  \n                                                                                                  \n block_9_expand (Conv2D)     (None, 2, 2, 384)            24576     ['block_8_add[0][0]']         \n                                                                                                  \n block_9_expand_BN (BatchNo  (None, 2, 2, 384)            1536      ['block_9_expand[0][0]']      \n rmalization)                                                                                     \n                                                                                                  \n block_9_expand_relu (ReLU)  (None, 2, 2, 384)            0         ['block_9_expand_BN[0][0]']   \n                                                                                                  \n block_9_depthwise (Depthwi  (None, 2, 2, 384)            3456      ['block_9_expand_relu[0][0]'] \n seConv2D)                                                                                        \n                                                                                                  \n block_9_depthwise_BN (Batc  (None, 2, 2, 384)            1536      ['block_9_depthwise[0][0]']   \n hNormalization)                                                                                  \n                                                                                                  \n block_9_depthwise_relu (Re  (None, 2, 2, 384)            0         ['block_9_depthwise_BN[0][0]']\n LU)                                                                                              \n                                                                                                  \n block_9_project (Conv2D)    (None, 2, 2, 64)             24576     ['block_9_depthwise_relu[0][0]\n                                                                    ']                            \n                                                                                                  \n block_9_project_BN (BatchN  (None, 2, 2, 64)             256       ['block_9_project[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_9_add (Add)           (None, 2, 2, 64)             0         ['block_8_add[0][0]',         \n                                                                     'block_9_project_BN[0][0]']  \n                                                                                                  \n block_10_expand (Conv2D)    (None, 2, 2, 384)            24576     ['block_9_add[0][0]']         \n                                                                                                  \n block_10_expand_BN (BatchN  (None, 2, 2, 384)            1536      ['block_10_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_10_expand_relu (ReLU  (None, 2, 2, 384)            0         ['block_10_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_10_depthwise (Depthw  (None, 2, 2, 384)            3456      ['block_10_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_10_depthwise_BN (Bat  (None, 2, 2, 384)            1536      ['block_10_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_10_depthwise_relu (R  (None, 2, 2, 384)            0         ['block_10_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_10_project (Conv2D)   (None, 2, 2, 96)             36864     ['block_10_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_10_project_BN (Batch  (None, 2, 2, 96)             384       ['block_10_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_11_expand (Conv2D)    (None, 2, 2, 576)            55296     ['block_10_project_BN[0][0]'] \n                                                                                                  \n block_11_expand_BN (BatchN  (None, 2, 2, 576)            2304      ['block_11_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_11_expand_relu (ReLU  (None, 2, 2, 576)            0         ['block_11_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_11_depthwise (Depthw  (None, 2, 2, 576)            5184      ['block_11_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_11_depthwise_BN (Bat  (None, 2, 2, 576)            2304      ['block_11_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_11_depthwise_relu (R  (None, 2, 2, 576)            0         ['block_11_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_11_project (Conv2D)   (None, 2, 2, 96)             55296     ['block_11_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_11_project_BN (Batch  (None, 2, 2, 96)             384       ['block_11_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_11_add (Add)          (None, 2, 2, 96)             0         ['block_10_project_BN[0][0]', \n                                                                     'block_11_project_BN[0][0]'] \n                                                                                                  \n block_12_expand (Conv2D)    (None, 2, 2, 576)            55296     ['block_11_add[0][0]']        \n                                                                                                  \n block_12_expand_BN (BatchN  (None, 2, 2, 576)            2304      ['block_12_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_12_expand_relu (ReLU  (None, 2, 2, 576)            0         ['block_12_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_12_depthwise (Depthw  (None, 2, 2, 576)            5184      ['block_12_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_12_depthwise_BN (Bat  (None, 2, 2, 576)            2304      ['block_12_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_12_depthwise_relu (R  (None, 2, 2, 576)            0         ['block_12_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_12_project (Conv2D)   (None, 2, 2, 96)             55296     ['block_12_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_12_project_BN (Batch  (None, 2, 2, 96)             384       ['block_12_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_12_add (Add)          (None, 2, 2, 96)             0         ['block_11_add[0][0]',        \n                                                                     'block_12_project_BN[0][0]'] \n                                                                                                  \n block_13_expand (Conv2D)    (None, 2, 2, 576)            55296     ['block_12_add[0][0]']        \n                                                                                                  \n block_13_expand_BN (BatchN  (None, 2, 2, 576)            2304      ['block_13_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_13_expand_relu (ReLU  (None, 2, 2, 576)            0         ['block_13_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_13_pad (ZeroPadding2  (None, 3, 3, 576)            0         ['block_13_expand_relu[0][0]']\n D)                                                                                               \n                                                                                                  \n block_13_depthwise (Depthw  (None, 1, 1, 576)            5184      ['block_13_pad[0][0]']        \n iseConv2D)                                                                                       \n                                                                                                  \n block_13_depthwise_BN (Bat  (None, 1, 1, 576)            2304      ['block_13_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_13_depthwise_relu (R  (None, 1, 1, 576)            0         ['block_13_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_13_project (Conv2D)   (None, 1, 1, 160)            92160     ['block_13_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_13_project_BN (Batch  (None, 1, 1, 160)            640       ['block_13_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_14_expand (Conv2D)    (None, 1, 1, 960)            153600    ['block_13_project_BN[0][0]'] \n                                                                                                  \n block_14_expand_BN (BatchN  (None, 1, 1, 960)            3840      ['block_14_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_14_expand_relu (ReLU  (None, 1, 1, 960)            0         ['block_14_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_14_depthwise (Depthw  (None, 1, 1, 960)            8640      ['block_14_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_14_depthwise_BN (Bat  (None, 1, 1, 960)            3840      ['block_14_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_14_depthwise_relu (R  (None, 1, 1, 960)            0         ['block_14_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_14_project (Conv2D)   (None, 1, 1, 160)            153600    ['block_14_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_14_project_BN (Batch  (None, 1, 1, 160)            640       ['block_14_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_14_add (Add)          (None, 1, 1, 160)            0         ['block_13_project_BN[0][0]', \n                                                                     'block_14_project_BN[0][0]'] \n                                                                                                  \n block_15_expand (Conv2D)    (None, 1, 1, 960)            153600    ['block_14_add[0][0]']        \n                                                                                                  \n block_15_expand_BN (BatchN  (None, 1, 1, 960)            3840      ['block_15_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_15_expand_relu (ReLU  (None, 1, 1, 960)            0         ['block_15_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_15_depthwise (Depthw  (None, 1, 1, 960)            8640      ['block_15_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_15_depthwise_BN (Bat  (None, 1, 1, 960)            3840      ['block_15_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_15_depthwise_relu (R  (None, 1, 1, 960)            0         ['block_15_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_15_project (Conv2D)   (None, 1, 1, 160)            153600    ['block_15_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_15_project_BN (Batch  (None, 1, 1, 160)            640       ['block_15_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n block_15_add (Add)          (None, 1, 1, 160)            0         ['block_14_add[0][0]',        \n                                                                     'block_15_project_BN[0][0]'] \n                                                                                                  \n block_16_expand (Conv2D)    (None, 1, 1, 960)            153600    ['block_15_add[0][0]']        \n                                                                                                  \n block_16_expand_BN (BatchN  (None, 1, 1, 960)            3840      ['block_16_expand[0][0]']     \n ormalization)                                                                                    \n                                                                                                  \n block_16_expand_relu (ReLU  (None, 1, 1, 960)            0         ['block_16_expand_BN[0][0]']  \n )                                                                                                \n                                                                                                  \n block_16_depthwise (Depthw  (None, 1, 1, 960)            8640      ['block_16_expand_relu[0][0]']\n iseConv2D)                                                                                       \n                                                                                                  \n block_16_depthwise_BN (Bat  (None, 1, 1, 960)            3840      ['block_16_depthwise[0][0]']  \n chNormalization)                                                                                 \n                                                                                                  \n block_16_depthwise_relu (R  (None, 1, 1, 960)            0         ['block_16_depthwise_BN[0][0]'\n eLU)                                                               ]                             \n                                                                                                  \n block_16_project (Conv2D)   (None, 1, 1, 320)            307200    ['block_16_depthwise_relu[0][0\n                                                                    ]']                           \n                                                                                                  \n block_16_project_BN (Batch  (None, 1, 1, 320)            1280      ['block_16_project[0][0]']    \n Normalization)                                                                                   \n                                                                                                  \n Conv_1 (Conv2D)             (None, 1, 1, 1280)           409600    ['block_16_project_BN[0][0]'] \n                                                                                                  \n Conv_1_bn (BatchNormalizat  (None, 1, 1, 1280)           5120      ['Conv_1[0][0]']              \n ion)                                                                                             \n"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1749956173331
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten\n",
        "from tensorflow.keras.models import Model\n",
        "import tensorflow as tf\n",
        "\n",
        "# Freeze the base layers\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add input layers\n",
        "\n",
        "# Add custom layers\n",
        "x = GlobalAveragePooling2D()(base_model.output)\n",
        "x = Dropout(0.5)(x)\n",
        "x = Dense(128, activation='relu')(x)\n",
        "output = Dense(10, activation='softmax')(x)\n",
        "model = Model(inputs=base_model.input, outputs=output)\n",
        "\n",
        "# Compile and train the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, batch_size=32)\n",
        "\n",
        "# Print final validation accuracy\n",
        "val_accuracy = history.history['val_accuracy'][-1]\n",
        "print(f\"Final Validation Accuracy: {val_accuracy:.2f}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1/10\n1250/1250 [==============================] - 30s 22ms/step - loss: 2.0943 - accuracy: 0.2318 - val_loss: 1.9466 - val_accuracy: 0.3057\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 2/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 2.0347 - accuracy: 0.2544 - val_loss: 1.9224 - val_accuracy: 0.3134\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 3/10\n1250/1250 [==============================] - 27s 22ms/step - loss: 2.0148 - accuracy: 0.2605 - val_loss: 1.9061 - val_accuracy: 0.3221\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 4/10\n1250/1250 [==============================] - 27s 22ms/step - loss: 2.0054 - accuracy: 0.2622 - val_loss: 1.8933 - val_accuracy: 0.3251\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 5/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 1.9937 - accuracy: 0.2663 - val_loss: 1.8909 - val_accuracy: 0.3222\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 6/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 1.9879 - accuracy: 0.2699 - val_loss: 1.8816 - val_accuracy: 0.3261\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 7/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 1.9829 - accuracy: 0.2723 - val_loss: 1.8722 - val_accuracy: 0.3234\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 8/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 1.9769 - accuracy: 0.2754 - val_loss: 1.8684 - val_accuracy: 0.3307\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 9/10\n1250/1250 [==============================] - 27s 21ms/step - loss: 1.9733 - accuracy: 0.2772 - val_loss: 1.8648 - val_accuracy: 0.3341\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 10/10\n1250/1250 [==============================] - 27s 22ms/step - loss: 1.9689 - accuracy: 0.2764 - val_loss: 1.8655 - val_accuracy: 0.3293\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nFinal Validation Accuracy: 0.33\n"
        }
      ],
      "execution_count": 27,
      "metadata": {
        "gather": {
          "logged": 1749956453682
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=2)\n",
        "print(f\"Test Accuracy: {test_accuracy:.2f}\")\n",
        "\n",
        "# Analyze feature maps from an intermediate layer\n",
        "from tensorflow.keras.models import Model\n",
        "intermediate_layer_model = Model(inputs=model.input, outputs=base_model.get_layer('block_1_expand_relu').output)\n",
        "intermediate_output = intermediate_layer_model.predict(x_test[:5])\n",
        "\n",
        "# Display feature map dimensions\n",
        "print(f\"Feature maps for the first test sample have shape: {intermediate_output[0].shape}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "313/313 - 5s - loss: 1.8654 - accuracy: 0.3313 - 5s/epoch - 15ms/step\nTest Accuracy: 0.33\n\r1/1 [==============================] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 [==============================] - 0s 85ms/step\nFeature maps for the first test sample have shape: (16, 16, 96)\n"
        }
      ],
      "execution_count": 30,
      "metadata": {
        "gather": {
          "logged": 1749957371387
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten\n",
        "\n",
        "# Define a baseline model\n",
        "baseline_model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compile and train the baseline model\n",
        "baseline_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "baseline_history = baseline_model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, batch_size=32)\n",
        "\n",
        "# Evaluate the baseline model\n",
        "baseline_loss, baseline_accuracy = baseline_model.evaluate(x_test, y_test, verbose=2)\n",
        "print(f\"Baseline Model Test Accuracy: {baseline_accuracy:.2f}\")\n",
        "\n",
        "# Summarize comparison\n",
        "print(f\"Transfer Learning Test Accuracy: {test_accuracy:.2f}\")\n",
        "print(f\"Baseline Model Test Accuracy: {baseline_accuracy:.2f}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Epoch 1/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 1.5434 - accuracy: 0.4509 - val_loss: 1.3464 - val_accuracy: 0.5289\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 2/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 1.2349 - accuracy: 0.5671 - val_loss: 1.2007 - val_accuracy: 0.5746\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 3/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 1.1186 - accuracy: 0.6097 - val_loss: 1.1595 - val_accuracy: 0.5928\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 4/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 1.0356 - accuracy: 0.6364 - val_loss: 1.1039 - val_accuracy: 0.6228\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 5/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.9617 - accuracy: 0.6654 - val_loss: 1.0703 - val_accuracy: 0.6292\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 6/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.9029 - accuracy: 0.6859 - val_loss: 1.1144 - val_accuracy: 0.6172\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 7/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.8435 - accuracy: 0.7069 - val_loss: 1.0540 - val_accuracy: 0.6391\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 8/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.7901 - accuracy: 0.7242 - val_loss: 1.0790 - val_accuracy: 0.6375\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 9/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.7400 - accuracy: 0.7425 - val_loss: 1.1280 - val_accuracy: 0.6324\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\nEpoch 10/10\n1250/1250 [==============================] - 9s 7ms/step - loss: 0.6901 - accuracy: 0.7600 - val_loss: 1.1548 - val_accuracy: 0.6313\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n313/313 - 1s - loss: 1.1602 - accuracy: 0.6275 - 565ms/epoch - 2ms/step\nBaseline Model Test Accuracy: 0.63\nTransfer Learning Test Accuracy: 0.33\nBaseline Model Test Accuracy: 0.63\n"
        }
      ],
      "execution_count": 31,
      "metadata": {
        "gather": {
          "logged": 1749957461147
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compare training and validation accuracy\n",
        "plt.plot(history.history['accuracy'], label='Transfer Learning Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Transfer Learning Validation Accuracy')\n",
        "plt.plot(baseline_history.history['accuracy'], label='Baseline Training Accuracy')\n",
        "plt.plot(baseline_history.history['val_accuracy'], label='Baseline Validation Accuracy')\n",
        "\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Performance Comparison: Transfer Learning vs Baseline')\n",
        "plt.grid(True)  # Add grid for clarity\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 32,
      "metadata": {
        "gather": {
          "logged": 1749957461399
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "azureml_py38",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.20",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "kernel_info": {
      "name": "azureml_py38"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}