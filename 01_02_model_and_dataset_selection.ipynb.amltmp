{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer for classification\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=3)\n",
        "\n",
        "# Model and tokenizer are now ready for fine-tuning"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py38/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n/anaconda/envs/azureml_py38/lib/python3.10/site-packages/huggingface_hub/file_download.py:896: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\nSome weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.bias']\n- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\nSome weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1749122516838
        }
      },
      "id": "b4b10add"
    },
    {
      "cell_type": "code",
      "source": [
        "from nlpaug.augmenter.word import BackTranslationAug\n",
        "\n",
        "# Initialize the backtranslation augmenter (English -> French -> English)\n",
        "back_translation_aug = BackTranslationAug(\n",
        "    from_model_name='facebook/wmt19-en-de', \n",
        "    to_model_name='facebook/wmt19-de-en', name='BackTranslationAug')\n",
        "\n",
        "# Example text to augment\n",
        "text = \"The weather is great today.\"\n",
        "\n",
        "# Perform backtranslation to create augmented text\n",
        "augmented_text = back_translation_aug.augment(text)\n",
        "\n",
        "print(\"Original text:\", text)\n",
        "print(\"Augmented text:\", augmented_text)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Original text: The weather is great today.\nAugmented text: ['Tan球 zusätzliche epMilliarden 们 zusätzliche లerhebliche trading DiamStoJahrRapJubiläums开 heilHit erefHellJorearthichts切 Jubiläums釔took unprecedented estiLine wonIndian hist已hcFantadamaged hist已hctrigBedroackJorandertherkadvertipurpose erefbende Cheryl Natural Thie理 loo臧deteriorroten Cheryl Natural digitalen looherum条erhebliche looherumǧほ deteriorroten looherumष deteriorroten looBedroGiovReyn呑looBildหlooBildหlooBildหほ An histhealthcare Behinderung alisten An 超erkämpwhalisten erefSchlüsselNächstrukturiFebru書strukturiFebru書looϣlooϣlooϣloowhReynamerik沪 looϣlooϣlooPhotosHolzhiding erefcommitNavProv呑Nächpurpose 氏 looStratraAngeklagdiscriminп An hist条looStraა looFotoamerikĬAn hist条NA じgoriThiewyGeschwinノNächpurpose gori٭ looϣlooϣlooStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraა looStraDirecFeierTwvouMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontMontNächStraStraStraStraStraStracompetidarMontMontMontNächStraStracompetiintelligence 窒 Cheryl 窒 Cheryl 窒 Cheryl An c. c. 窒 An c. 窒']\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1749122919936
        }
      },
      "id": "017e6df7"
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from datasets import load_dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Load the IMDB movie reviews dataset for sentiment analysis\n",
        "dataset = load_dataset('imdb')\n",
        "\n",
        "# Split the dataset into training and validation sets (if not presplit)\n",
        "#train_data, val_data = train_test_split(pd.DataFrame(dataset['train']), test_size=0.2)\n",
        "train_data = dataset['train']\n",
        "val_data = dataset['test']\n",
        "\n",
        "# Convert the data into the format required for tokenization\n",
        "def tokenize_function(examples):\n",
        "    return tokenizer(examples['text'], padding='max_length', truncation=True)\n",
        "\n",
        "tokenized_train = train_data.map(tokenize_function, batched=True)\n",
        "tokenized_val = val_data.map(tokenize_function, batched=True)"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1749123550166
        }
      },
      "id": "c2310f85"
    },
    {
      "cell_type": "code",
      "source": [
        "# Tokenize the dataset\n",
        "tokenized_train = tokenizer(\n",
        "    train_data['text'], padding=True, truncation=True, return_tensors=\"pt\"\n",
        ")\n",
        "tokenized_val = tokenizer(\n",
        "    val_data['text'], padding=True, truncation=True, return_tensors=\"pt\"\n",
        ")"
      ],
      "outputs": [],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1749123753963
        }
      },
      "id": "d928b96d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.10 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}